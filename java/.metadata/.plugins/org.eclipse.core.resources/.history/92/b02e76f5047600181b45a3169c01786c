import java.util.ArrayList;

public class Person extends Thread{
	String personName;
	boolean isWaitStarted = false;
	boolean isNotified = false;
	ArrayList<String> receiverList;
	public String getPersonName() {
		return personName;
	}
	public void setPersonName(String personName) {
		this.personName = personName;
	}
	public ArrayList<String> getReceiverList() {
		return receiverList;
	}
	public void setReceiverList(ArrayList<String> receiverList) {
		this.receiverList = receiverList;
	}
	
	@Override
	public void run() {
		for(String receiver : receiverList) {
			try {
				Thread.sleep(100L);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			this.sendMessage(receiver);
		}
		this.isWaitStarted = true;
		synchronized (this) {
			while(true) {
				try {
					this.wait(1000L);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				if(this.isNotified)
					this.isNotified = false;
				else
					break;
			}
		}
		System.out.println("\nChild Thread : " + this.getPersonName() + "Ends");
	}
	
	synchronized public void sendMessage(String receiver) {
		Person receiverObject = exchange.personMap.get(receiver);
		synchronized (receiverObject) {
			receiverObject.isNotified = true;
		}
		receiverObject.receiveMessage(receiver, this.getPersonName(), "intro", Long.toString(System.currentTimeMillis()));
	}
	synchronized public void receiveMessage(String receiver,String sender,String type, String timestamp) {
		synchronized (exchange.masterThread) {
			exchange.masterThread.isNotified = true
		}
		exchange.masterThread.printMessage(String.format("%s received %s message from %s [%s]", receiver,type,sender,timestamp));
		if(type.equalsIgnoreCase("intro")) {
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Person receiverObject = exchange.personMap.get(sender);
			synchronized (receiverObject) {
				receiverObject.isNotified = true;
			}
			receiverObject.receiveMessage(sender, receiver, "reply", timestamp);
		}
	}
	
}
